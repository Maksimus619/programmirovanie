#include <SFML/Graphics.hpp>
#include <iostream>
#include <memory>

class Figure {
public:
    Figure(char symbol) : symbol(symbol) {}
    virtual ~Figure() {}

    virtual void draw(sf::RenderWindow& window, int row, int col, float cellSize) const = 0;

    char getSymbol() const {
        return symbol;
    }

protected:
    char symbol;
};

void Figure::draw(sf::RenderWindow& window, int row, int col, float cellSize) const {
    // Ваш код рисования
}

class Cross : public Figure {
public:
    Cross() : Figure('X') {}

    void draw(sf::RenderWindow& window, int row, int col, float cellSize) const override {
        sf::VertexArray cross(sf::Lines, 4);

        float offset = 5.f;
        cross[0].position = sf::Vector2f(col * cellSize + offset, row * cellSize + offset);
        cross[1].position = sf::Vector2f((col + 1) * cellSize - offset, (row + 1) * cellSize - offset);

        cross[2].position = sf::Vector2f(col * cellSize + offset, (row + 1) * cellSize - offset);
        cross[3].position = sf::Vector2f((col + 1) * cellSize - offset, row * cellSize + offset);

        for (int i = 0; i < 4; ++i)
            cross[i].color = sf::Color::Red;

        Figure::draw(window, row, col, cellSize);
    }
};

class Circle : public Figure {
public:
    Circle() : Figure('O') {}

    void draw(sf::RenderWindow& window, int row, int col, float cellSize) const override {
        sf::CircleShape circle(cellSize / 2 - 11.f);
        circle.setFillColor(sf::Color::Transparent);
        circle.setOutlineThickness(10.f);
        circle.setOutlineColor(sf::Color::Blue);
        circle.setPosition(col * cellSize + 5.f, row * cellSize + 5.f);

        window.draw(circle);

        Figure::draw(window, row, col, cellSize);
    }
};

class Board {
public:
    Board(int size) : size(size), cells(size, std::vector<std::unique_ptr<Figure>>(size, nullptr)) {}

    void draw(sf::RenderWindow& window, float cellSize) const {
        for (int i = 0; i < size; ++i) {
            for (int j = 0; j < size; ++j) {
                if (cells[i][j] != nullptr) {
                    cells[i][j]->draw(window, i, j, cellSize);
                }
            }
        }
    }

    bool makeMove(int row, int col, std::unique_ptr<Figure> figure) {
        if (cells[row][col] == nullptr) {
            cells[row][col] = std::move(figure);
            return true;
        }
        return false;
    }

    bool checkWin() const {
        // ваш код проверки на победу
        return false;
    }

private:
    int size;
    std::vector<std::vector<std::unique_ptr<Figure>>> cells;
};

int main() {
    // ваша функция main без изменений
}
