#include <iostream>
#include <iomanip>
#include <gtest/gtest.h>

class TimeSpan {
public:
    int days, hours, minutes, seconds;
    
    TimeSpan(int d, int h, int m, int s) : days(d), hours(h), minutes(m), seconds(s) {}
    
    TimeSpan operator+(const TimeSpan& other) const {
        return TimeSpan(days + other.days, hours + other.hours, minutes + other.minutes, seconds + other.seconds);
    }
    
    TimeSpan operator-(const TimeSpan& other) const {
        return TimeSpan(days - other.days, hours - other.hours, minutes - other.minutes, seconds - other.seconds);
    }
    
    friend std::ostream& operator<<(std::ostream& os, const TimeSpan& ts) {
        os << ts.days << "d " << ts.hours << "h " << ts.minutes << "m " << ts.seconds << "s";
        return os;
    }
};

class Time {
public:
    int hours, minutes, seconds;
    
    Time(int h, int m, int s) : hours(h), minutes(m), seconds(s) {}
    
    Time operator+(const TimeSpan& ts) const {
        return Time(hours + ts.hours, minutes + ts.minutes, seconds + ts.seconds);
    }
    
    TimeSpan operator-(const Time& other) const {
        return TimeSpan(0, hours - other.hours, minutes - other.minutes, seconds - other.seconds);
    }
    
    friend std::ostream& operator<<(std::ostream& os, const Time& t) {
        os << std::setw(2) << std::setfill('0') << t.hours << ":"
           << std::setw(2) << std::setfill('0') << t.minutes << ":"
           << std::setw(2) << std::setfill('0') << t.seconds;
        return os;
    }
};

// Google Test Cases
TEST(TimeSpanTest, Addition) {
    TimeSpan ts1(1, 2, 30, 15);
    TimeSpan ts2(0, 1, 45, 10);
    TimeSpan result = ts1 + ts2;
    EXPECT_EQ(result.days, 1);
    EXPECT_EQ(result.hours, 3);
    EXPECT_EQ(result.minutes, 75);
    EXPECT_EQ(result.seconds, 25);
}

TEST(TimeSpanTest, Subtraction) {
    TimeSpan ts1(1, 5, 45, 30);
    TimeSpan ts2(0, 2, 30, 15);
    TimeSpan result = ts1 - ts2;
    EXPECT_EQ(result.days, 1);
    EXPECT_EQ(result.hours, 3);
    EXPECT_EQ(result.minutes, 15);
    EXPECT_EQ(result.seconds, 15);
}

TEST(TimeTest, TimeDifference) {
    Time t1(14, 30, 0);
    Time t2(12, 15, 45);
    TimeSpan diff = t1 - t2;
    EXPECT_EQ(diff.days, 0);
    EXPECT_EQ(diff.hours, 2);
    EXPECT_EQ(diff.minutes, 14);
    EXPECT_EQ(diff.seconds, 15);
}

TEST(TimeTest, TimeAddition) {
    Time t(14, 30, 0);
    TimeSpan span(0, 2, 30, 0);
    Time result = t + span;
    EXPECT_EQ(result.hours, 16);
    EXPECT_EQ(result.minutes, 60);
    EXPECT_EQ(result.seconds, 0);
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
