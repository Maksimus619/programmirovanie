#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

#define MB (1024 * 1024)   // Определяем размер 1 МБ
#define KB 1024            // Определяем размер 1 КБ
#define BYTE 1             // Определяем размер 1 байт

int main(int argc, char *argv[]) {
    int rank, size;
    char *sendbuf, *recvbuf;

    // Инициализация MPI
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);  // Получаем ранг текущего процесса
    MPI_Comm_size(MPI_COMM_WORLD, &size);  // Получаем количество процессов

    // Определяем размер сообщения
    int message_size = MB;

    // Выделение памяти под отправляемое сообщение (каждый процесс отправляет сообщение)
    sendbuf = (char *)malloc(message_size * sizeof(char));

    // Инициализация отправляемого сообщения (например, заполняем нулями)
    for (int i = 0; i < message_size; i++) {
        sendbuf[i] = rank;  // Каждый процесс заполняет свой буфер своим рангом
    }

    // Выделение памяти под приемное сообщение только в процессе 0
    if (rank == 0) {
        recvbuf = (char *)malloc(message_size * size * sizeof(char));
    }

    // Переменная для измерения времени
    double start_time, end_time;

    // Начало операции сборки
    start_time = MPI_Wtime();

    // Сборка сообщений всех процессов в процесс 0
    MPI_Gather(sendbuf, message_size, MPI_CHAR, recvbuf, message_size, MPI_CHAR, 0, MPI_COMM_WORLD);

    // Конец операции сборки
    end_time = MPI_Wtime();

    // Вывод времени выполнения на процессе 0
    if (rank == 0) {
        printf("Время выполнения операции сборки: %f секунд\n", end_time - start_time);
    }

    // Освобождаем память
    free(sendbuf);
    if (rank == 0) {
        free(recvbuf);
    }

    // Завершение работы MPI
    MPI_Finalize();

    return 0;
}
