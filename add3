#include "Lprint.h"
#include "mySimpleComputer.h"
#include "myTerm.h"
#include <errno.h>
#include <fcntl.h>
#include <termios.h>
#include <time.h>
#include <unistd.h>

enum keys {
  ESC_KEY = 16,
  L_KEY,
  S_KEY,
  R_KEY,
  T_KEY,
  I_KEY,
  F5_KEY,
  F6_KEY,
  UP_KEY,
  DOWN_KEY,
  LEFT_KEY,
  RIGHT_KEY,
  ENTER_KEY,
  NOTHING_KEY,
  INVALID_KEY,

  ZERO_KEY = 0,
  ONE_KEY,
  TWO_KEY,
  THREE_KEY,
  FOUR_KEY,
  FIVE_KEY,
  SIX_KEY,
  SEVEN_KEY,
  EIGHT_KEY,
  NINE_KEY,
  A_KEY = 10,
  B_KEY,
  C_KEY,
  D_KEY,
  E_KEY,
  F_KEY,

  PLUS_KEY = 45,
  MINUS_KEY = 43
};

#define MIN_BUF_SIZE 6
char buffer[MIN_BUF_SIZE];
struct termios save;

int rk_mytermregime(int regime, int vtime, int vmin, int echo, int sigint) {
  struct termios curr;
  tcgetattr(fileno(stdin), &curr);
  // канонический режим
  if (regime) {
    curr.c_lflag |= ICANON;
  }
  // неканонический режим
  else if (!regime) {
    curr.c_lflag &= ~ICANON;
    sigint ? (curr.c_lflag |= ISIG) : (curr.c_lflag &= ~ISIG);
    echo ? (curr.c_lflag |= ECHO) : (curr.c_lflag &= ~ECHO);
    curr.c_cc[VMIN] = vmin;
    curr.c_cc[VTIME] = vtime;
  }
  if (tcsetattr(fileno(stdin), TCSAFLUSH, &curr) != 0) {
    return -1;
  }
  return 0;
}

int rk_readkey(enum keys *key) {
  char buf_local[MIN_BUF_SIZE - 1];
  // очистка буфера
  for (int i = 0; i < MIN_BUF_SIZE; i++) {
    buf_local[i] = 0;
  }
  // переключаем терминал в неканонический режим
  rk_mytermregime(0, 0, 1, 0, 1);

  // считываем первый введённый символ
  fflush(stdin); // очистка потока ввода
  read(fileno(stdin), buf_local, MIN_BUF_SIZE);

  if (!key) {
    return -1;
  }
  // проверка введённого символа
  if (buf_local[0] == '\033') { // Esc-последовательности
    switch (buf_local[1]) {
    case '\0':
      *key = ESC_KEY;
      break;
    case '[':
      switch (buf_local[2]) {
      case 'A':
        *key = UP_KEY;
        break;
      case 'B':
        *key = DOWN_KEY;
        break;
      case 'C':
        *key = RIGHT_KEY;
        break;
      case 'D':
        *key = LEFT_KEY;
        break;
      default:
        *key = INVALID_KEY;
      }
      break;
    default:
      *key = INVALID_KEY;
    }
  } else if (buf_local[0] >= '0' && buf_local[0] <= '9') {
    *key = (enum keys)(buf_local[0] - '0');
  } else if (buf_local[0] >= 'a' && buf_local[0] <= 'f') {
    *key = (enum keys)(buf_local[0] - 'a' + 10);
  } else if (buf_local[0] == '+') {
    *key = PLUS_KEY;
  } else if (buf_local[0] == '-') {
    *key = MINUS_KEY;
  } else {
    *key = INVALID_KEY;
  }

  // возвращаем терминал в канонический режим
  rk_mytermregime(1, 0, 0, 1, 1);
  return 0;
}

// Function to set terminal to canonical mode
int set_terminal_canonical_mode() {
    return rk_mytermregime(1, 0, 0, 1, 1);
}

int main(int argc, char *argv[]) {
  set_terminal_canonical_mode();
  // остальная часть функции main
}
