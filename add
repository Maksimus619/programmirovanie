#include <SFML/Graphics.hpp>
#include <cstdlib>
#include <ctime>

const int gridSize = 10;
const int cellSize = 40;

sf::RenderWindow window(sf::VideoMode(gridSize * cellSize, gridSize * cellSize), "Agario Lite");

sf::RectangleShape player(sf::Vector2f(cellSize, cellSize));
sf::RectangleShape food(sf::Vector2f(cellSize, cellSize));

int score = 0;

void initializeGame() {
    srand(time(0));

    player.setFillColor(sf::Color::Green);
    player.setPosition(rand() % gridSize * cellSize, rand() % gridSize * cellSize);

    food.setFillColor(sf::Color::Red);
    food.setPosition(rand() % gridSize * cellSize, rand() % gridSize * cellSize);
}

void handleInput() {
    sf::Event event;
    while (window.pollEvent(event)) {
        if (event.type == sf::Event::Closed)
            window.close();
    }

    if (sf::Keyboard::isKeyPressed(sf::Keyboard::W))
        player.move(0, -cellSize);
    if (sf::Keyboard::isKeyPressed(sf::Keyboard::S))
        player.move(0, cellSize);
    if (sf::Keyboard::isKeyPressed(sf::Keyboard::A))
        player.move(-cellSize, 0);
    if (sf::Keyboard::isKeyPressed(sf::Keyboard::D))
        player.move(cellSize, 0);
}

void checkCollision() {
    if (player.getGlobalBounds().intersects(food.getGlobalBounds())) {
        food.setPosition(rand() % gridSize * cellSize, rand() % gridSize * cellSize);
        player.setSize(sf::Vector2f(player.getSize().x + 5, player.getSize().y + 5));
        score++;
    }

    if (player.getPosition().x < 0 || player.getPosition().x >= window.getSize().x ||
        player.getPosition().y < 0 || player.getPosition().y >= window.getSize().y) {
        std::cout << "Game Over! Score: " << score << std::endl;
        window.close();
    }
}

int main() {
    initializeGame();

    while (window.isOpen()) {
        handleInput();
        checkCollision();

        window.clear();

        window.draw(player);
        window.draw(food);

        sf::Font font;
        if (!font.loadFromFile("arial.ttf")) {
            // handle error
        }

        sf::Text scoreText;
        scoreText.setFont(font);
        scoreText.setString("Score: " + std::to_string(score));
        scoreText.setCharacterSize(24);
        scoreText.setFillColor(sf::Color::White);
        scoreText.setPosition(10, 10);

        window.draw(scoreText);

        window.display();
    }

    return 0;
}
