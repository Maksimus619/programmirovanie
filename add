#include <iostream>
#include <vector>
#include <memory>
#include <string>
#include <sstream>
#include <iomanip>
#include <stdexcept>

// Базовый класс Expression
class Expression {
public:
    virtual ~Expression() = default;
    virtual double eval() const = 0;
    void add_operand(std::shared_ptr<Expression> operand) {
        operands.push_back(operand);
    }

protected:
    std::vector<std::shared_ptr<Expression>> operands;
};

// Класс для числовых значений
class Number : public Expression {
public:
    explicit Number(double value) : value(value) {}
    double eval() const override {
        return value;
    }

private:
    double value;
};

// Класс для сложения
class Add : public Expression {
public:
    double eval() const override {
        double sum = 0;
        for (const auto& operand : operands) {
            sum += operand->eval();
        }
        return sum;
    }
};

// Класс для вычитания
class Sub : public Expression {
public:
    double eval() const override {
        if (operands.empty()) return 0;
        double result = operands[0]->eval();
        for (size_t i = 1; i < operands.size(); ++i) {
            result -= operands[i]->eval();
        }
        return result;
    }
};

// Класс для умножения
class Mul : public Expression {
public:
    double eval() const override {
        if (operands.empty()) return 1;
        double result = 1;
        for (const auto& operand : operands) {
            result *= operand->eval();
        }
        return result;
    }
};

// Класс для деления
class Div : public Expression {
public:
    double eval() const override {
        if (operands.empty()) throw std::runtime_error("Division by zero");
        double result = operands[0]->eval();
        for (size_t i = 1; i < operands.size(); ++i) {
            double divisor = operands[i]->eval();
            if (divisor == 0) throw std::runtime_error("Division by zero");
            result /= divisor;
        }
        return result;
    }
};

// Класс для некорректного выражения
class Invalid : public Expression {
public:
    double eval() const override {
        throw std::runtime_error("Invalid expression");
    }
};

// Парсер выражений
std::shared_ptr<Expression> parse_expression(const std::string& input) {
    std::vector<std::shared_ptr<Expression>> expressions;
    std::vector<size_t> fold_indices;

    std::istringstream stream(input);
    char ch;
    while (stream >> ch) {
        if (ch == '(') {
            char op;
            stream >> op;
            std::shared_ptr<Expression> expr;
            switch (op) {
                case '+': expr = std::make_shared<Add>(); break;
                case '-': expr = std::make_shared<Sub>(); break;
                case '*': expr = std::make_shared<Mul>(); break;
                case '/': expr = std::make_shared<Div>(); break;
                default: expr = std::make_shared<Invalid>(); break;
            }
            expressions.push_back(expr);
            fold_indices.push_back(expressions.size() - 1);
        } else if (ch == ')') {
            if (fold_indices.empty()) return std::make_shared<Invalid>();
            size_t idx = fold_indices.back();
            fold_indices.pop_back();
            auto& expr = expressions[idx];
            for (size_t i = idx + 1; i < expressions.size(); ++i) {
                expr->add_operand(expressions[i]);
            }
            expressions.resize(idx + 1);
        } else if (std::isdigit(ch) || ch == '.' || ch == '-') {
            stream.putback(ch);
            double value;
            stream >> value;
            expressions.push_back(std::make_shared<Number>(value));
        } else {
            return std::make_shared<Invalid>();
        }
    }

    if (expressions.size() == 1) return expressions[0];
    return std::make_shared<Invalid>();
}

int main() {
    std::string line;
    while (std::getline(std::cin, line)) {
        try {
            auto expr = parse_expression(line);
            double result = expr->eval();
            std::cout << std::fixed << std::setprecision(4) << result << std::endl;
        } catch (const std::exception& e) {
            std::cout << "nan" << std::endl;
        }
    }
    return 0;
}
