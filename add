#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv) {
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    char* sendbuf = (char*)malloc(size * 1024 * sizeof(char));  // Буфер отправки для каждого процесса (размер сообщения 1 KB)
    char* recvbuf = (char*)malloc(size * 1024 * sizeof(char));  // Буфер приема для каждого процесса (размер сообщения 1 KB)

    // Заполнение буфера на каждом процессе
    for (int i = 0; i < size * 1024; i++) {
        sendbuf[i] = 'A' + rank;
    }

    // Измерение времени выполнения на процессе 0
    double start_time, end_time;
    if (rank == 0) {
        start_time = MPI_Wtime();
    }

    // All-to-All обмен с использованием неблокирующих функций MPI_Isend, MPI_Irecv и MPI_Waitall
    MPI_Request* requests = (MPI_Request*)malloc(2 * size * sizeof(MPI_Request));
    MPI_Status* statuses = (MPI_Status*)malloc(2 * size * sizeof(MPI_Status));

    for (int i = 0; i < size; i++) {
        MPI_Isend(&sendbuf[i * 1024], 1024, MPI_CHAR, i, 0, MPI_COMM_WORLD, &requests[i]);
        MPI_Irecv(&recvbuf[i * 1024], 1024, MPI_CHAR, i, 0, MPI_COMM_WORLD, &requests[size + i]);
    }

    MPI_Waitall(2 * size, requests, statuses);

    // Измерение времени выполнения
    if (rank == 0) {
        end_time = MPI_Wtime();
        printf("All-to-All total time: %f seconds\n", end_time - start_time);
    }

    // Освобождение памяти
    free(sendbuf);
    free(recvbuf);
    free(requests);
    free(statuses);

    MPI_Finalize();
    return 0;
}