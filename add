#include <iostream>
#include <string>
#include <array>

// Функция, которая возвращает код Soundex для заданной буквы
char getSoundexCode(char letter) {
    letter = tolower(letter);
    
    // Массив, где каждая позиция соответствует коду символа a-z
    static const std::array<char, 26> soundexMapping = {
        /* a */ '0', /* b */ '1', /* c */ '2', /* d */ '3', /* e */ '0',
        /* f */ '1', /* g */ '2', /* h */ '0', /* i */ '0', /* j */ '2',
        /* k */ '2', /* l */ '4', /* m */ '5', /* n */ '5', /* o */ '0',
        /* p */ '1', /* q */ '2', /* r */ '6', /* s */ '2', /* t */ '3',
        /* u */ '0', /* v */ '1', /* w */ '0', /* x */ '2', /* y */ '0',
        /* z */ '2'
    };
    
    // Проверка, что символ в пределах a-z
    if (letter >= 'a' && letter <= 'z') {
        return soundexMapping[letter - 'a'];
    }
    
    return '0';  // Если символ не входит в диапазон a-z
}

std::string soundex(const std::string& name) {
    if (name.empty()) return "0000";

    // Результат начинается с первой заглавной буквы
    std::string result(1, toupper(name[0]));

    char lastCode = getSoundexCode(name[0]);

    // Проходим по символам начиная со второго
    for (size_t i = 1; i < name.size(); ++i) {
        char currentCode = getSoundexCode(name[i]);
        if (currentCode != '0' && currentCode != lastCode) {  // Пропускаем повторяющиеся коды и символы, не имеющие кода
            result += currentCode;
            lastCode = currentCode;
        }
        if (result.size() == 4) break;  // Ограничиваем длину результата до 4 символов
    }

    // Дополняем результат нулями, если длина меньше 4
    while (result.size() < 4) {
        result += '0';
    }

    return result;
}

int main() {
    std::string name;
    std::cin >> name;
    std::cout << soundex(name) << "\n";
    return 0;
}
