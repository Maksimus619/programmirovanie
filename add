#include <mpi.h>
#include <stdio.h>

int main(int argc, char** argv) {
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    char message[1024 * 1024];  // Максимальный размер сообщения 1 MB
    MPI_Status status;

    // Повторение передачи сообщений p - 1 раз
    for (int i = 0; i < size - 1; i++) {
        int send_to = (rank + 1) % size;
        int recv_from = (rank - 1 + size) % size;

        if (i == 0) {
            // Заполнение сообщения для начального обмена
            if (rank == 0) {
                for (int j = 0; j < sizeof(message); j++) {
                    message[j] = 'A';
                }
            }
        }

        // Отправка сообщения соседнему процессу
        MPI_Send(message, 1024, MPI_CHAR, send_to, 0, MPI_COMM_WORLD);

        // Прием сообщения от предыдущего процесса
        MPI_Recv(message, 1024, MPI_CHAR, recv_from, 0, MPI_COMM_WORLD, &status);
    }

    // Измерение времени выполнения на процессе 0
    double start_time, end_time;
    if (rank == 0) {
        start_time = MPI_Wtime();
    }

    for (int i = 0; i < size - 1; i++) {
        int send_to = (rank + 1) % size;
        int recv_from = (rank - 1 + size) % size;

        // Отправка и прием сообщений разного размера
        MPI_Sendrecv(message, 1, MPI_CHAR, send_to, 0,
                     message, 1, MPI_CHAR, recv_from, 0,
                     MPI_COMM_WORLD, &status);

        MPI_Sendrecv(message, 1024, MPI_CHAR, send_to, 0,
                     message, 1024, MPI_CHAR, recv_from, 0,
                     MPI_COMM_WORLD, &status);

        MPI_Sendrecv(message, 1024 * 1024, MPI_CHAR, send_to, 0,
                     message, 1024 * 1024, MPI_CHAR, recv_from, 0,
                     MPI_COMM_WORLD, &status);
    }

    if (rank == 0) {
        end_time = MPI_Wtime();
        printf("Total time for communication: %f seconds\n", end_time - start_time);
    }

    MPI_Finalize();
    return 0;
}
